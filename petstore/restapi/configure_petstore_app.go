// Code generated by go-swagger; DO NOT EDIT.

package restapi

import (
	"crypto/tls"
	"net/http"

	errors "github.com/go-openapi/errors"
	runtime "github.com/go-openapi/runtime"
	middleware "github.com/go-openapi/runtime/middleware"
	graceful "github.com/tylerb/graceful"

	models "petstore/models"
	operations "petstore/restapi/operations"
)

// This file is safe to edit. Once it exists it will not be overwritten

//go:generate swagger generate server --target ../src --name petstore-app --spec ../petstore-expanded.json

func configureFlags(api *operations.PetstoreAppAPI) {
	// api.CommandLineOptionsGroups = []swag.CommandLineOptionsGroup{ ... }
}

func configureAPI(api *operations.PetstoreAppAPI) http.Handler {
	// configure the api here
	api.ServeError = errors.ServeError

	// Set your custom logger if needed. Default one is log.Printf
	// Expected interface func(string, ...interface{})
	//
	// Example:
	// api.Logger = log.Printf

	api.JSONConsumer = runtime.JSONConsumer()

	api.JSONProducer = runtime.JSONProducer()

	api.AddPetHandler = operations.AddPetHandlerFunc(func(params operations.AddPetParams) middleware.Responder {
		payload := addPet(params.Pet.Name, params.Pet.Tag)
		return operations.NewAddPetOK().WithPayload(payload)
	})

	api.DeletePetHandler = operations.DeletePetHandlerFunc(func(params operations.DeletePetParams) middleware.Responder {
		err, _ := deletePetImplementation(&params)
		if err != nil {
			return operations.NewDeletePetDefault(500).WithPayload(err)
		}
		return operations.NewDeletePetNoContent()
	})

	api.FindPetByIDHandler = operations.FindPetByIDHandlerFunc(func(params operations.FindPetByIDParams) middleware.Responder {
		err, payload := findPetsByIdImplementation(&params)
		if err != nil {
			return operations.NewFindPetByIDDefault(500).WithPayload(err)
		}
		return operations.NewFindPetByIDOK().WithPayload(payload)
	})

	api.FindPetsHandler = operations.FindPetsHandlerFunc(func(params operations.FindPetsParams) middleware.Responder {
		err, payload := findPetsImplementation(&params)
		if err != nil {
			return operations.NewFindPetsDefault(500).WithPayload(err)
		}

		return operations.NewFindPetsOK().WithPayload(payload)
		//return middleware.NotImplemented("operation .FindPets has not yet been implemented-bbb")
	})

	api.ServerShutdown = func() {}

	return setupGlobalMiddleware(api.Serve(setupMiddlewares))
}

// The TLS configuration before HTTPS server starts.
func configureTLS(tlsConfig *tls.Config) {
	// Make all necessary changes to the TLS configuration here.
}

// As soon as server is initialized but not run yet, this function will be called.
// If you need to modify a config, store server instance to stop it individually later, this is the place.
// This function can be called multiple times, depending on the number of serving schemes.
// scheme value will be set accordingly: "http", "https" or "unix"
func configureServer(s *graceful.Server, scheme, addr string) {
}

// The middleware configuration is for the handler executors. These do not apply to the swagger.json document.
// The middleware executes after routing but before authentication, binding and validation
func setupMiddlewares(handler http.Handler) http.Handler {
	return handler
}

// The middleware configuration happens before anything, this middleware also applies to serving the swagger.json document.
// So this is a good place to plug in a panic handling middleware, logging and metrics
func setupGlobalMiddleware(handler http.Handler) http.Handler {
	return handler
}

func hasValue(item *operations.FindPetsParams) bool {
	return item.Limit != nil
}

func isInvalidLimit(item *operations.FindPetsParams) bool {
	return *item.Limit < 1
}

var arrPets = []*models.Pet{buildPet(int64(1), "teddy", "bear"), buildPet(int64(2), "kitty", "cat"), buildPet(int64(3), "buddy", "dog")}

func findPetsImplementation(item *operations.FindPetsParams) (*models.Error, []*models.Pet) {
	if hasValue(item) && isInvalidLimit(item) {
		msg := "Limit should be more than 0."
		arrVoid := []*models.Pet{}
		return &models.Error{Code: item.Limit, Message: &msg}, arrVoid
	}
	arrRes := []*models.Pet{}
	for _, v := range arrPets {
		for _, t := range item.Tags {
			if v.Tag == t {
				arrRes = append(arrRes, v)
			}
		}
	}

	return nil, arrRes
}

func buildPet(petId int64, petName string, tags string) *models.Pet {
	return &models.Pet{models.NewPet{&petName, tags}, &petId}
}

func addPet(name *string, tag string) *models.Pet {
	petId := int64(len(arrPets) + 1)
	p := models.Pet{models.NewPet{name, tag}, &petId}
	arrPets = append(arrPets, &p)
	return &p
}

func findPetsByIdImplementation(item *operations.FindPetByIDParams) (*models.Error, *models.Pet) {
	for _, v := range arrPets {
		a := int64(*v.ID)
		b := int64(item.ID)
		if a == b {
			return nil, v
		}
	}
	msg := "ID not found"
	occ := int32(item.ID)
	return &models.Error{Code: &occ, Message: &msg}, nil
}

func deletePetImplementation(item *operations.DeletePetParams) (*models.Error, *models.Pet) {
	var deleted *models.Pet
	for _, v := range arrPets {
		if *v.ID == item.ID {
			deleted = v
		}
	}

	newArrRes := []*models.Pet{}
	if deleted == nil {
		msg := "ID not found"
		occ := int32(item.ID)
		return &models.Error{Code: &occ, Message: &msg}, nil
	} else {

		for _, v := range arrPets {
			if *v.ID != item.ID {
				newArrRes = append(newArrRes, v)
			}
		}

		arrPets = newArrRes
		return nil, deleted
	}
}
